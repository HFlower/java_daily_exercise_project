1.进程与线程
进程：是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。
线程：是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。
虽然系统是把资源分给进程，但是CPU很特殊，是被分配到线程的，所以线程是CPU分配的基本单位。
二者联系：
一个进程中有多个线程，多个线程共享进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈区域。
二者区别：
进程：有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响。
线程：是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉。
2.sleep和yield
sleep:使用sleep方法之后，线程进入阻塞状态，当睡眠的时间结束，重新进入到就绪状态，由系统控制就绪状态进入到运行状态
yield:使用yield方法之后，线程进入就绪状态，yield()方法只是让当前线程暂停一下，重新进入就绪的线程池中，让系统的线程调度器重新调度器重新调度一次，完全可能出现这样的情况：当某个线程调用yield()方法之后，线程调度器又将其调度出来重新进入到运行状态执行。当某个线程调用了yield()方法暂停之后，优先级与当前线程相同，或者优先级比当前线程更高的就绪状态的线程更有可能获得执行的机会，当然，只是有可能，因为我们不可能精确的干涉cpu调度线程。
注：关于sleep()方法和yield()方的区别如下：
（1）sleep方法暂停当前线程后，会进入阻塞状态，只有当睡眠时间到了，才会转入就绪状态。而yield方法调用后，是直接进入就绪状态，所以有可能刚进入就绪状态，又被调度到运行状态。
（2）sleep方法声明抛出了InterruptedException，所以调用sleep方法的时候要捕获该异常，或者显示声明抛出该异常。而yield方法则没有声明抛出任务异常。
（3）sleep方法比yield方法有更好的可移植性，通常不要依靠yield方法来控制并发线程的执行。
3.正确结束线程
（1）正常执行完run方法，然后结束掉；
（2）控制循环条件和判断条件的标识符来结束掉线程。